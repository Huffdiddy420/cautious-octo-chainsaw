<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:CardInputWidgetPlacement.kt$CardInputWidgetPlacement$ internal fun getFocusField( touchX: Int, frameStart: Int, isShowingFullCard: Boolean, postalCodeEnabled: Boolean )</ID>
    <ID>ComplexMethod:PaymentMethodJsonParser.kt$PaymentMethodJsonParser$override fun parse(json: JSONObject): PaymentMethod</ID>
    <ID>ComplexMethod:ShippingInfoWidget.kt$ShippingInfoWidget$ fun validateAllFields(): Boolean</ID>
    <ID>ComplexMethod:Source.kt$Source.Companion$@SourceType @JvmStatic fun asSourceType(sourceType: String?): String</ID>
    <ID>ComplexMethod:SourceJsonParser.kt$SourceJsonParser.Companion$@Source.SourceType private fun asSourceType(sourceType: String?): String</ID>
    <ID>ComplexMethod:SourceJsonParser.kt$SourceJsonParser.Companion$private inline fun &lt;reified T : StripeModel> optStripeJsonModel( jsonObject: JSONObject, @Size(min = 1) key: String ): T?</ID>
    <ID>ConstructorParameterNaming:Source.kt$Source$private val _klarna: Klarna? = null</ID>
    <ID>ConstructorParameterNaming:Source.kt$Source$private val _weChat: WeChat? = null</ID>
    <ID>ForbiddenComment:PaymentOptionsAdapter.kt$PaymentOptionsAdapter.CardViewHolder$// TODO: Communicate error if card data not present</ID>
    <ID>ForbiddenComment:SourceEndToEndTest.kt$SourceEndToEndTest$// TODO: investigate test failures - ANDROID-461</ID>
    <ID>ImplicitDefaultLocale:CurrencyFormatterTest.kt$CurrencyFormatterTest$String.format("%s, ", it.currencyCode)</ID>
    <ID>LargeClass:CardInputWidget.kt$CardInputWidget : LinearLayoutCardWidget</ID>
    <ID>LargeClass:CardInputWidgetTest.kt$CardInputWidgetTest</ID>
    <ID>LargeClass:CardMultilineWidgetTest.kt$CardMultilineWidgetTest</ID>
    <ID>LargeClass:CardNumberEditTextTest.kt$CardNumberEditTextTest</ID>
    <ID>LargeClass:CustomerSessionTest.kt$CustomerSessionTest</ID>
    <ID>LargeClass:PaymentIntentFixtures.kt$PaymentIntentFixtures</ID>
    <ID>LargeClass:SourceParamsTest.kt$SourceParamsTest</ID>
    <ID>LargeClass:Stripe.kt$Stripe</ID>
    <ID>LargeClass:StripeApiRepository.kt$StripeApiRepository : StripeRepository</ID>
    <ID>LargeClass:StripeApiRepositoryTest.kt$StripeApiRepositoryTest</ID>
    <ID>LargeClass:StripeKtxTest.kt$StripeKtxTest</ID>
    <ID>LargeClass:StripePaymentController.kt$StripePaymentController : PaymentController</ID>
    <ID>LongMethod:BaseAddCardFragment.kt$BaseAddCardFragment$private fun setupCardWidget()</ID>
    <ID>LongMethod:CustomerSessionOperationExecutor.kt$CustomerSessionOperationExecutor$@JvmSynthetic internal suspend fun execute( ephemeralKey: EphemeralKey, operation: EphemeralOperation )</ID>
    <ID>LongMethod:StripeApiRepositoryTest.kt$StripeApiRepositoryTest$@Test fun getPaymentMethods_whenPopulated_returnsExpectedList()</ID>
    <ID>LongParameterList:CardBrand.kt$CardBrand$( val code: String, val displayName: String, @DrawableRes val icon: Int, @DrawableRes val cvcIcon: Int = R.drawable.stripe_ic_cvc, @DrawableRes val errorIcon: Int = R.drawable.stripe_ic_error, /** * Accepted CVC lengths */ val cvcLength: Set&lt;Int> = setOf(3), /** * The default max length when the card number is formatted without spaces (e.g. "4242424242424242") * * Note that [CardBrand.DinersClub]'s max length depends on the BIN (e.g. card number prefix). * In the case of a [CardBrand.DinersClub] card, use [getMaxLengthForCardNumber]. */ @Deprecated("Will be removed in upcoming major release.") val defaultMaxLength: Int = 16, /** * Based on [Issuer identification number table](http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29) */ @Deprecated("Will be removed in upcoming major release.") val pattern: Pattern? = null, /** * Patterns for discrete lengths */ @Deprecated("Will be removed in upcoming major release.") private val partialPatterns: Map&lt;Int, Pattern>, /** * The position of spaces in a formatted card number. For example, "4242424242424242" is * formatted to "4242 4242 4242 4242". */ @Deprecated("Will be removed in upcoming major release.") val defaultSpacePositions: Set&lt;Int> = setOf(4, 9, 14), /** * By default, a [CardBrand] does not have variants. */ @Deprecated("Will be removed in upcoming major release.") private val variantMaxLength: Map&lt;Pattern, Int> = emptyMap(), @Deprecated("Will be removed in upcoming major release.") private val variantSpacePositions: Map&lt;Pattern, Set&lt;Int>> = emptyMap() )</ID>
    <ID>LongParameterList:CardNumberEditText.kt$CardNumberEditText$( context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = androidx.appcompat.R.attr.editTextStyle, // TODO(mshafrir-stripe): make immutable after `CardWidgetViewModel` is integrated in `CardWidget` subclasses internal var workContext: CoroutineContext, private val cardAccountRangeRepository: CardAccountRangeRepository, private val staticCardAccountRanges: StaticCardAccountRanges = DefaultStaticCardAccountRanges(), private val analyticsRequestExecutor: AnalyticsRequestExecutor, private val analyticsRequestFactory: AnalyticsRequestFactory )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodCreateParams: PaymentMethodCreateParams, clientSecret: String, returnUrl: String? = null, savePaymentMethod: Boolean? = null, extraParams: Map&lt;String, Any>?, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodCreateParams: PaymentMethodCreateParams, clientSecret: String, returnUrl: String?, savePaymentMethod: Boolean? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodCreateParams: PaymentMethodCreateParams, clientSecret: String, savePaymentMethod: Boolean? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodId: String, clientSecret: String, returnUrl: String? = null, savePaymentMethod: Boolean? = null, extraParams: Map&lt;String, Any>?, paymentMethodOptions: PaymentMethodOptionsParams? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodId: String, clientSecret: String, returnUrl: String?, savePaymentMethod: Boolean? = null, paymentMethodOptions: PaymentMethodOptionsParams? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodId: String, clientSecret: String, savePaymentMethod: Boolean? = null, paymentMethodOptions: PaymentMethodOptionsParams? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( sourceId: String, clientSecret: String, returnUrl: String, savePaymentMethod: Boolean? = null, extraParams: Map&lt;String, Any>?, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( sourceParams: SourceParams, clientSecret: String, returnUrl: String, savePaymentMethod: Boolean? = null, extraParams: Map&lt;String, Any>?, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:CustomerSession.kt$CustomerSession$( context: Context, stripeRepository: StripeRepository, publishableKey: String, stripeAccountId: String?, private val workContext: CoroutineContext = createCoroutineDispatcher(), private val operationIdFactory: OperationIdFactory = StripeOperationIdFactory(), private val timeSupplier: TimeSupplier = { Calendar.getInstance().timeInMillis }, ephemeralKeyManagerFactory: EphemeralKeyManager.Factory )</ID>
    <ID>LongParameterList:CustomerSession.kt$CustomerSession$( paymentMethodType: PaymentMethod.Type, @IntRange(from = 1, to = 100) limit: Int? = null, endingBefore: String? = null, startingAfter: String? = null, productUsage: Set&lt;String>, listener: PaymentMethodsRetrievalListener )</ID>
    <ID>LongParameterList:DefaultFlowController.kt$DefaultFlowController$( viewModelStoreOwner: ViewModelStoreOwner, private val lifecycleScope: CoroutineScope, activityLauncherFactory: ActivityLauncherFactory, private val statusBarColor: () -> Int?, private val authHostSupplier: () -> AuthActivityStarter.Host, private val paymentOptionFactory: PaymentOptionFactory, private val flowControllerInitializer: FlowControllerInitializer, paymentControllerFactory: PaymentControllerFactory, private val paymentFlowResultProcessor: PaymentFlowResultProcessor, private val eventReporter: EventReporter, private val publishableKey: String, private val stripeAccountId: String?, private val sessionId: SessionId, private val defaultReturnUrl: DefaultReturnUrl, private val paymentOptionCallback: PaymentOptionCallback, private val paymentResultCallback: PaymentSheetResultCallback )</ID>
    <ID>LongParameterList:DefaultStripeChallengeStatusReceiver.kt$DefaultStripeChallengeStatusReceiver$( private val stripe3ds2CompletionStarter: Stripe3ds2CompletionStarter, private val stripeRepository: StripeRepository, private val stripeIntent: StripeIntent, private val sourceId: String, private val requestOptions: ApiRequest.Options, private val analyticsRequestExecutor: AnalyticsRequestExecutor, private val analyticsRequestFactory: AnalyticsRequestFactory, private val transaction: Transaction, private val onEndChallenge: () -> Unit, private val retryDelaySupplier: RetryDelaySupplier = RetryDelaySupplier(), enableLogging: Boolean = false, private val workContext: CoroutineContext )</ID>
    <ID>LongParameterList:FlowControllerFactory.kt$FlowControllerFactory$( private val viewModelStoreOwner: ViewModelStoreOwner, private val lifecycleScope: CoroutineScope, private val appContext: Context, private val activityLauncherFactory: ActivityLauncherFactory, private val statusBarColor: () -> Int?, private val authHostSupplier: () -> AuthActivityStarter.Host, private val paymentOptionFactory: PaymentOptionFactory, private val config: PaymentConfiguration, private val paymentOptionCallback: PaymentOptionCallback, private val paymentResultCallback: PaymentSheetResultCallback )</ID>
    <ID>LongParameterList:PaymentSession.kt$PaymentSession$( private val context: Context, application: Application, viewModelStoreOwner: ViewModelStoreOwner, private val lifecycleOwner: LifecycleOwner, savedStateRegistryOwner: SavedStateRegistryOwner, private val config: PaymentSessionConfig, customerSession: CustomerSession, private val paymentMethodsActivityStarter: ActivityStarter&lt;PaymentMethodsActivity, PaymentMethodsActivityStarter.Args>, private val paymentFlowActivityStarter: ActivityStarter&lt;PaymentFlowActivity, PaymentFlowActivityStarter.Args>, paymentSessionData: PaymentSessionData = PaymentSessionData(config) )</ID>
    <ID>LongParameterList:PaymentSheetViewModel.kt$PaymentSheetViewModel$( private val stripeIntentRepository: StripeIntentRepository, private val paymentMethodsRepository: PaymentMethodsRepository, private val paymentFlowResultProcessor: PaymentFlowResultProcessor, private val googlePayRepository: GooglePayRepository, prefsRepository: PrefsRepository, private val eventReporter: EventReporter, internal val args: PaymentSheetContract.Args, defaultReturnUrl: DefaultReturnUrl, private val logger: Logger = Logger.noop(), workContext: CoroutineContext, application: Application )</ID>
    <ID>LongParameterList:SourceParams.kt$SourceParams.Companion$( name: String, iban: String, addressLine1: String?, city: String, postalCode: String, @Size(2) country: String )</ID>
    <ID>LongParameterList:SourceParams.kt$SourceParams.Companion$( name: String, iban: String, email: String?, addressLine1: String?, city: String?, postalCode: String?, @Size(2) country: String? )</ID>
    <ID>LongParameterList:StripeApiRepository.kt$StripeApiRepository$( context: Context, private val publishableKey: String, private val appInfo: AppInfo? = null, private val logger: Logger = Logger.noop(), private val workContext: CoroutineContext = Dispatchers.IO, private val stripeApiRequestExecutor: ApiRequestExecutor = DefaultApiRequestExecutor( workContext = workContext, logger = logger ), private val analyticsRequestExecutor: AnalyticsRequestExecutor = AnalyticsRequestExecutor.Default(logger), private val fingerprintDataRepository: FingerprintDataRepository = FingerprintDataRepository.Default(context), private val analyticsRequestFactory: AnalyticsRequestFactory = AnalyticsRequestFactory(context, publishableKey), private val fingerprintParamsUtils: FingerprintParamsUtils = FingerprintParamsUtils(), betas: Set&lt;StripeApiBeta> = emptySet(), apiVersion: String = ApiVersion(betas = betas).code, sdkVersion: String = Stripe.VERSION )</ID>
    <ID>LongParameterList:StripePaymentController.kt$StripePaymentController$( ares: Stripe3ds2AuthResult.Ares, transaction: Transaction, sourceId: String, maxTimeout: Int, paymentRelayStarter: PaymentRelayStarter, host: AuthActivityStarter.Host, stripeIntent: StripeIntent, requestOptions: ApiRequest.Options )</ID>
    <ID>LongParameterList:StripePaymentController.kt$StripePaymentController$( context: Context, private val publishableKey: String, private val stripeRepository: StripeRepository, private val enableLogging: Boolean = false, private val messageVersionRegistry: MessageVersionRegistry = MessageVersionRegistry(), private val config: PaymentAuthConfig = PaymentAuthConfig.get(), private val threeDs2Service: StripeThreeDs2Service = StripeThreeDs2ServiceImpl(context, enableLogging), private val analyticsRequestExecutor: AnalyticsRequestExecutor = AnalyticsRequestExecutor.Default(Logger.getInstance(enableLogging)), private val analyticsRequestFactory: AnalyticsRequestFactory = AnalyticsRequestFactory(context.applicationContext, publishableKey), private val challengeProgressActivityStarter: ChallengeProgressActivityStarter = ChallengeProgressActivityStarter.Default(), private val alipayRepository: AlipayRepository = DefaultAlipayRepository(stripeRepository), private val paymentRelayLauncher: ActivityResultLauncher&lt;PaymentRelayStarter.Args>? = null, private val paymentBrowserAuthLauncher: ActivityResultLauncher&lt;PaymentBrowserAuthContract.Args>? = null, private val stripe3ds2ChallengeLauncher: ActivityResultLauncher&lt;PaymentFlowResult.Unvalidated>? = null, private val workContext: CoroutineContext = Dispatchers.IO, private val uiContext: CoroutineContext = Dispatchers.Main )</ID>
    <ID>LongParameterList:StripePaymentController.kt$StripePaymentController$( paymentBrowserWebStarter: PaymentBrowserAuthStarter, stripeIntent: StripeIntent, requestCode: Int, clientSecret: String, authUrl: String, stripeAccount: String?, returnUrl: String? = null, shouldCancelSource: Boolean = false, shouldCancelIntentOnUserNavigation: Boolean = true )</ID>
    <ID>LongParameterList:StripePaymentController.kt$StripePaymentController$( result: Stripe3ds2AuthResult, transaction: Transaction, sourceId: String, timeout: Int, paymentRelayStarter: PaymentRelayStarter, requestCode: Int, host: AuthActivityStarter.Host, stripeIntent: StripeIntent, requestOptions: ApiRequest.Options )</ID>
    <ID>LongParameterList:StripeRepository.kt$StripeRepository$( customerId: String, publishableKey: String, productUsageTokens: Set&lt;String>, sourceId: String, @Source.SourceType sourceType: String, requestOptions: ApiRequest.Options )</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessType$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Company$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Company.Builder$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Company.Document$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Individual$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Individual.Builder$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.Companion$*</ID>
    <ID>MaxLineLength:AddPaymentMethodActivityStarter.kt$AddPaymentMethodActivityStarter.Args.Builder$*</ID>
    <ID>MaxLineLength:AddPaymentMethodViewModelTest.kt$AddPaymentMethodViewModelTest$private val paymentMethodRetrievalCaptor: KArgumentCaptor&lt;CustomerSession.PaymentMethodRetrievalListener> = argumentCaptor()</ID>
    <ID>MaxLineLength:AlipayRedirectTest.kt$AlipayRedirectTest$"&amp;notify_url=https%3A%2F%2Fhooks.stripe.com%2Falipay%2Falipay%2Fhook%2F6255d30b067c8f7a162c79c654483646%2Fsrc_1Gt188KlwPmebFhp4SWhZwn1"</ID>
    <ID>MaxLineLength:AlipayRedirectTest.kt$AlipayRedirectTest$"&amp;return_url=https%3A%2F%2Fhooks.stripe.com%2Fadapter%2Falipay%2Fredirect%2Fcomplete%2Fsrc_1Gt188KlwPmebFhp4SWhZwn1%2Fsrc_client_secret_RMaQKPfAmHOdUwcNhXEjolR4"</ID>
    <ID>MaxLineLength:AlipayRedirectTest.kt$AlipayRedirectTest$"https://hooks.stripe.com/adapter/alipay/redirect/complete/src_1Gt188KlwPmebFhp4SWhZwn1/src_client_secret_RMaQKPfAmHOdUwcNhXEjolR4"</ID>
    <ID>MaxLineLength:AnalyticsRequestFactoryTest.kt$AnalyticsRequestFactoryTest$.</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val CB_PUBLISHABLE_KEY = "pk_test_51Gsr5VLtxFHECmaoeyWTxRKLZZiks5QKbg5H0IeGd8yt7OzQhA7807thLrHayMOeDRmJv3ara1VYy6AvBXAnUGcB00QAZheC0Z"</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val NETBANKING_PUBLISHABLE_KEY = "pk_test_51H7wmsBte6TMTRd4gph9Wm7gnQOKJwdVTCj30AhtB8MhWtlYj6v9xDn1vdCtKYGAE7cybr6fQdbQQtgvzBihE9cl00tOnrTpL9"</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val UPI_PUBLISHABLE_KEY = "pk_test_51H7wmsBte6TMTRd4gph9Wm7gnQOKJwdVTCj30AhtB8MhWtlYj6v9xDn1vdCtKYGAE7cybr6fQdbQQtgvzBihE9cl00tOnrTpL9"</ID>
    <ID>MaxLineLength:ApiRequestTest.kt$ApiRequestTest$.</ID>
    <ID>MaxLineLength:AppInfo.kt$AppInfo$*</ID>
    <ID>MaxLineLength:BankAccount.kt$BankAccount$*</ID>
    <ID>MaxLineLength:BankAccountTokenParams.kt$BankAccountTokenParams$*</ID>
    <ID>MaxLineLength:BecsDebitMandateAcceptanceFactoryTest.kt$BecsDebitMandateAcceptanceFactoryTest$.</ID>
    <ID>MaxLineLength:BecsDebitMandateAcceptanceTextViewTest.kt$BecsDebitMandateAcceptanceTextViewTest$.</ID>
    <ID>MaxLineLength:BecsDebitWidgetTest.kt$BecsDebitWidgetTest$ By providing your bank account details and confirming this payment, you agree to this Direct Debit Request and the Direct Debit Request service agreement, and authorise Stripe Payments Australia Pty Ltd ACN 160 180 343 Direct Debit User ID number 507156 (“Stripe”) to debit your account through the Bulk Electronic Clearing System (BECS) on behalf of Rocketship Inc. (the Merchant) for any amounts separately communicated to you by the Merchant. You certify that you are either an account holder or an authorised signatory on the account listed above.</ID>
    <ID>MaxLineLength:BillingAddressViewTest.kt$BillingAddressViewTest$fun</ID>
    <ID>MaxLineLength:Card.kt$Card$*</ID>
    <ID>MaxLineLength:Card.kt$Card$@Deprecated("Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.")</ID>
    <ID>MaxLineLength:CardBrand.kt$CardBrand$* Based on [Issuer identification number table](http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29)</ID>
    <ID>MaxLineLength:CardBrand.kt$CardBrand.MasterCard$pattern = Pattern.compile("^(2221|2222|2223|2224|2225|2226|2227|2228|2229|222|223|224|225|226|227|228|229|23|24|25|26|270|271|2720|50|51|52|53|54|55|56|57|58|59|67)[0-9]*$")</ID>
    <ID>MaxLineLength:CardFormView.kt$CardFormView$*</ID>
    <ID>MaxLineLength:CardFormView.kt$CardFormView$return (cardMultilineWidget.invalidFields.toList() + listOfNotNull(Fields.Postal.takeIf { !isPostalValid() })).toSet()</ID>
    <ID>MaxLineLength:CardInputWidgetPlacement.kt$CardInputWidgetPlacement$touchX &lt; frameStart + peekCardWidth</ID>
    <ID>MaxLineLength:CardInputWidgetTest.kt$CardInputWidgetTest$cardInputWidget.cardNumberEditText.getParentOnFocusChangeListener().onFocusChange(cardInputWidget.cardNumberEditText, true)</ID>
    <ID>MaxLineLength:CardInputWidgetTest.kt$CardInputWidgetTest$cardInputWidget.expiryDateEditText.getParentOnFocusChangeListener().onFocusChange(cardInputWidget.expiryDateEditText, true)</ID>
    <ID>MaxLineLength:CardInputWidgetTest.kt$CardInputWidgetTest$cardInputWidget.postalCodeEditText.getParentOnFocusChangeListener().onFocusChange(cardInputWidget.postalCodeEditText, true)</ID>
    <ID>MaxLineLength:CardNumberEditText.kt$CardNumberEditText.CardNumberTextWatcher$// TODO (michelleb-stripe) Should set error message to incomplete, then in focus change if it isn't complete it will update it.</ID>
    <ID>MaxLineLength:CardNumberEditTextTest.kt$CardNumberEditTextTest$fun</ID>
    <ID>MaxLineLength:CardUtils.kt$CardUtils$@Deprecated("CardInputWidget and CardMultilineWidget handle card brand lookup. This method should not be relied on for determining CardBrand.")</ID>
    <ID>MaxLineLength:ConfirmParamsFactoryTest.kt$ConfirmParamsFactoryTest$fun</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams$*</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.SetupFutureUsage$*</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Shipping$*</ID>
    <ID>MaxLineLength:ConfirmSetupIntentParams.kt$ConfirmSetupIntentParams.Companion$*</ID>
    <ID>MaxLineLength:CustomerSessionOperationExecutorTest.kt$CustomerSessionOperationExecutorTest$fun</ID>
    <ID>MaxLineLength:CustomerSessionTest.kt$CustomerSessionTest$fun</ID>
    <ID>MaxLineLength:DefaultAlipayRepositoryTest.kt$DefaultAlipayRepositoryTest$"https://hooks.stripe.com/adapter/alipay/redirect/complete/src_1HDEFWKlwPmebFhp6tcpln8T/src_client_secret_S6H9mVMKK6qxk9YxsUvbH55K"</ID>
    <ID>MaxLineLength:DefaultApiRequestExecutorTest.kt$DefaultApiRequestExecutorTest$.</ID>
    <ID>MaxLineLength:DefaultFlowController.kt$DefaultFlowController$"FlowController must be successfully initialized using configure() before calling presentPaymentOptions()"</ID>
    <ID>MaxLineLength:DefaultFlowControllerInitializerTest.kt$DefaultFlowControllerInitializerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$fun</ID>
    <ID>MaxLineLength:DefaultGooglePayRepository.kt$DefaultGooglePayRepository$*</ID>
    <ID>MaxLineLength:DefaultPaymentFlowResultProcessorTest.kt$DefaultPaymentFlowResultProcessorTest$fun</ID>
    <ID>MaxLineLength:EphemeralKey.kt$EphemeralKey$*</ID>
    <ID>MaxLineLength:EphemeralKeyManager.kt$EphemeralKeyManager$ Received an ephemeral key that could not be parsed. See https://stripe.com/docs/mobile/android/basic for more details.</ID>
    <ID>MaxLineLength:EphemeralKeyManager.kt$EphemeralKeyManager$ Received an invalid ephemeral key. See https://stripe.com/docs/mobile/android/basic for more details.</ID>
    <ID>MaxLineLength:EphemeralKeyManagerTest.kt$EphemeralKeyManagerTest$"Received an ephemeral key that could not be parsed. See https://stripe.com/docs/mobile/android/basic for more details."</ID>
    <ID>MaxLineLength:FingerprintDataRepositoryTest.kt$FingerprintDataRepositoryTest$fun</ID>
    <ID>MaxLineLength:GooglePayConfig.kt$GooglePayConfig$*</ID>
    <ID>MaxLineLength:GooglePayFixtures.kt$GooglePayFixtures$ </ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory$*</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory$* [IsReadyToPayRequest](https://developers.google.com/pay/api/android/reference/request-objects#IsReadyToPayRequest)</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory.BillingAddressParameters$*</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory.ShippingAddressParameters$* [ShippingAddressParameters](https://developers.google.com/pay/api/android/reference/request-objects#ShippingAddressParameters)</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory.TransactionInfo$*</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$delegate ?: throw IllegalStateException("Cannot move to state $newState since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$val d = delegate ?: throw IllegalStateException("Cannot run onActivity since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:KlarnaSourceParams.kt$KlarnaSourceParams$*</ID>
    <ID>MaxLineLength:KlarnaSourceParams.kt$KlarnaSourceParams.PaymentPageOptions$*</ID>
    <ID>MaxLineLength:MandateDataParams.kt$MandateDataParams.Type.Online$*</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"https://hooks.stripe.com/three_d_secure/authenticate?amount=1250&amp;client_secret=src_client_secret_abc123&amp;return_url=&amp;source=src_X9Y8Z7&amp;usage=single_use"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"https://hooks.stripe.com/three_d_secure/authenticate?amount=1250&amp;client_secret=src_client_secret_abc123&amp;return_url=https%3A%2F%2Fhooks.stripe.com%2Fredirect%2Fcomplete%2Fsrc_X9Y8Z7%3Fclient_secret%3Dsrc_client_secret_abc123&amp;source=src_X9Y8Z7&amp;usage=single_use"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"mailto:patrick@example.com?payment_intent=pi_123&amp;payment_intent_client_secret=pi_123_secret_456&amp;source_type=card"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"stripe://payment_auth?setup_intent=seti_1234&amp;setup_intent_client_secret=seti_1234_secret_5678&amp;source_type=card"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"stripe://payment_intent_return?payment_intent=pi_123&amp;payment_intent_client_secret=pi_123_secret_456&amp;source_type=card"</ID>
    <ID>MaxLineLength:PaymentFlowActivityStarter.kt$PaymentFlowActivityStarter.Args.Builder$*</ID>
    <ID>MaxLineLength:PaymentFlowResult.kt$PaymentFlowResult$*</ID>
    <ID>MaxLineLength:PaymentIntent.kt$PaymentIntent.Error$*</ID>
    <ID>MaxLineLength:PaymentIntent.kt$PaymentIntent.Shipping$*</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$ </ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"-----BEGIN CERTIFICATE-----\nMIIFtTCCA52gAwIBAgIQJqSRaPua/6cpablmVDHWUDANBgkqhkiG9w0BAQsFADB6\nMQswCQYDVQQGEwJVUzETMBEGA1UEChMKTWFzdGVyQ2FyZDEoMCYGA1UECxMfTWFz\ndGVyQ2FyZCBJZGVudGl0eSBDaGVjayBHZW4gMzEsMCoGA1UEAxMjUFJEIE1hc3Rl\nckNhcmQgM0RTMiBBY3F1aXJlciBTdWIgQ0EwHhcNMTgxMTIwMTQ1MzIzWhcNMjEx\nMTIwMTQ1MzIzWjBxMQswCQYDVQQGEwJVUzEdMBsGA1UEChMUTWFzdGVyQ2FyZCBX\nb3JsZHdpZGUxGzAZBgNVBAsTEmdhdGV3YXktZW5jcnlwdGlvbjEmMCQGA1UEAxMd\nM2RzMi5kaXJlY3RvcnkubWFzdGVyY2FyZC5jb20wggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQCFlZjqbbL9bDKOzZFawdbyfQcezVEUSDCWWsYKw/V6co9A\nGaPBUsGgzxF6+EDgVj3vYytgSl8xFvVPsb4ZJ6BJGvimda8QiIyrX7WUxQMB3hyS\nBOPf4OB72CP+UkaFNR6hdlO5ofzTmB2oj1FdLGZmTN/sj6ZoHkn2Zzums8QAHFjv\nFjspKUYCmms91gpNpJPUUztn0N1YMWVFpFMytahHIlpiGqTDt4314F7sFABLxzFr\nDmcqhf623SPV3kwQiLVWOvewO62ItYUFgHwle2dq76YiKrUv1C7vADSk2Am4gqwv\n7dcCnFeM2AHbBFBa1ZBRQXosuXVw8ZcQqfY8m4iNAgMBAAGjggE+MIIBOjAOBgNV\nHQ8BAf8EBAMCAygwCQYDVR0TBAIwADAfBgNVHSMEGDAWgBSakqJUx4CN/s5W4wMU\n/17uSLhFuzBIBggrBgEFBQcBAQQ8MDowOAYIKwYBBQUHMAGGLGh0dHA6Ly9vY3Nw\nLnBraS5pZGVudGl0eWNoZWNrLm1hc3RlcmNhcmQuY29tMCgGA1UdEQQhMB+CHTNk\nczIuZGlyZWN0b3J5Lm1hc3RlcmNhcmQuY29tMGkGA1UdHwRiMGAwXqBcoFqGWGh0\ndHA6Ly9jcmwucGtpLmlkZW50aXR5Y2hlY2subWFzdGVyY2FyZC5jb20vOWE5MmEy\nNTRjNzgwOGRmZWNlNTZlMzAzMTRmZjVlZWU0OGI4NDViYi5jcmwwHQYDVR0OBBYE\nFHxN6+P0r3+dFWmi/+pDQ8JWaCbuMA0GCSqGSIb3DQEBCwUAA4ICAQAtwW8siyCi\nmhon1WUAUmufZ7bbegf3cTOafQh77NvA0xgVeloELUNCwsSSZgcOIa4Zgpsa0xi5\nfYxXsPLgVPLM0mBhTOD1DnPu1AAm32QVelHe6oB98XxbkQlHGXeOLs62PLtDZd94\n7pm08QMVb+MoCnHLaBLV6eKhKK+SNrfcxr33m0h3v2EMoiJ6zCvp8HgIHEhVpleU\n8H2Uo5YObatb/KUHgtp2z0vEfyGhZR7hrr48vUQpfVGBABsCV0aqUkPxtAXWfQo9\n1N9B7H3EIcSjbiUz5vkj9YeDSyJIi0Y/IZbzuNMsz2cRi1CWLl37w2fe128qWxYq\nY/k+Y4HX7uYchB8xPaZR4JczCvg1FV2JrkOcFvElVXWSMpBbe2PS6OMr3XxrHjzp\nDyM9qvzge0Ai9+rq8AyGoG1dP2Ay83Ndlgi42X3yl1uEUW2feGojCQQCFFArazEj\nLUkSlrB2kA12SWAhsqqQwnBLGSTp7PqPZeWkluQVXS0sbj0878kTra6TjG3U+KqO\nJCj8v6G380qIkAXe1xMHHNQ6GS59HZMeBPYkK2y5hmh/JVo4bRfK7Ya3blBSBfB8\nAVWQ5GqVWklvXZsQLN7FH/fMIT3y8iE1W19Ua4whlhvn7o/aYWOkHr1G2xyh8BHj\n7H63A2hjcPlW/ZAJSTuBZUClAhsNohH2Jg==\n-----END CERTIFICATE-----\n"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"-----BEGIN CERTIFICATE-----\nMIIFxzCCA6+gAwIBAgIQFsjyIuqhw80wNMjXU47lfjANBgkqhkiG9w0BAQsFADB8\nMQswCQYDVQQGEwJVUzETMBEGA1UEChMKTWFzdGVyQ2FyZDEoMCYGA1UECxMfTWFz\ndGVyQ2FyZCBJZGVudGl0eSBDaGVjayBHZW4gMzEuMCwGA1UEAxMlUFJEIE1hc3Rl\nckNhcmQgSWRlbnRpdHkgQ2hlY2sgUm9vdCBDQTAeFw0xNjA3MTQwNzI0MDBaFw0z\nMDA3MTUwODEwMDBaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpNYXN0ZXJDYXJk\nMSgwJgYDVQQLEx9NYXN0ZXJDYXJkIElkZW50aXR5IENoZWNrIEdlbiAzMS4wLAYD\nVQQDEyVQUkQgTWFzdGVyQ2FyZCBJZGVudGl0eSBDaGVjayBSb290IENBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxZF3nCEiT8XFFaq+3BPT0cMDlWE7\n6IBsdx27w3hLxwVLog42UTasIgzmysTKpBc17HEZyNAqk9GrCHo0Oyk4JZuXHoW8\n0goZaR2sMnn49ytt7aGsE1PsfVup8gqAorfm3IFab2/CniJJNXaWPgn94+U/nsoa\nqTQ6j+6JBoIwnFklhbXHfKrqlkUZJCYaWbZRiQ7nkANYYM2Td3N87FmRanmDXj5B\nG6lc9o1clTC7UvRQmNIL9OdDDZ8qlqY2Fi0eztBnuo2DUS5tGdVy8SgqPM3E12ft\nk4EdlKyrWmBqFcYwGx4AcSJ88O3rQmRBMxtk0r5vhgr6hDCGq7FHK/hQFP9LhUO9\n1qxWEtMn76Sa7DPCLas+tfNRVwG12FBuEZFhdS/qKMdIYUE5Q6uwGTEvTzg2kmgJ\nT3sNa6dbhlYnYn9iIjTh0dPGgiXap1Bhi8B9aaPFcHEHSqW8nZUINcrwf5AUi+7D\n+q/AG5ItiBtQTCaaFm74gv51yutzwgKnH9Q+x3mtuK/uwlLCslj9DeXgOzMWFxFg\nuuwLGX39ktDnetxNw3PLabjHkDlGDIfx0MCQakM74sTcuW8ICiHvNA7fxXCnbtjs\ny7at/yXYwAd+IDS51MA/g3OYVN4M+0pG843Re6Z53oODp0Ymugx0FNO1NxT3HO1h\nd7dXyjAV/tN/GGcCAwEAAaNFMEMwDgYDVR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQI\nMAYBAf8CAQEwHQYDVR0OBBYEFNSlUaqS2hGLFMT/EXrhHeEx+UqxMA0GCSqGSIb3\nDQEBCwUAA4ICAQBLqIYorrtVz56F6WOoLX9CcRjSFim7gO873a3p7+62I6joXMsM\nr0nd9nRPcEwduEloZXwFgErVUQWaUZWNpue0mGvU7BUAgV9Tu0J0yA+9srizVoMv\nx+o4zTJ3Vu5p5aTf1aYoH1xYVo5ooFgl/hI/EXD2lo/xOUfPKXBY7twfiqOziQmT\nGBuqPRq8h3dQRlXYxX/rzGf80SecIT6wo9KavDkjOmJWGzzHsn6Ryo6MEClMaPn0\nte87ukNN740AdPhTvNeZdWlwyqWAJpsv24caEckjSpgpoIZOjc7PAcEVQOWFSxUe\nsMk4Jz5bVZa/ABjzcp+rsq1QLSJ5quqHwWFTewChwpw5gpw+E5SpKY6FIHPlTdl+\nqHThvN8lsKNAQg0qTdEbIFZCUQC0Cl3Ti3q/cXv8tguLJNWvdGzB600Y32QHclMp\neyabT4/QeOesqpx6Da70J2KvLT1j6Ch2BsKSzeVLahrjnoPrdgiIYYBOgeA3T8SE\n1pgagt56R7nIkRQbtesoRKi+NfC7pPb/G1VUsj/cREAHH1i1UKa0aCsIiANfEdQN\n5Ok6wtFJJhp3apAvnVkrZDfOG5we9bYzvGoI7SUnleURBJ+N3ihjARfL4hDeeRHh\nYyLkM3kEyEkrJBL5r0GDjicxM+aFcR2fCBAkv3grT5kz4kLcvsmHX+9DBw==\n-----END CERTIFICATE-----\n\n"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"_input_charset=utf-8&amp;app_pay=Y&amp;currency=USD&amp;forex_biz=FP&amp;notify_url=https%3A%2F%2Fhooks.stripe.com%2Falipay%2Falipay%2Fhook%2F6255d30b067c8f7a162c79c654483646%2Fsrc_1HDEFWKlwPmebFhp6tcpln8T&amp;out_trade_no=src_1HDEFWKlwPmebFhp6tcpln8T&amp;partner=2088621828244481&amp;payment_type=1&amp;product_code=NEW_WAP_OVERSEAS_SELLER&amp;return_url=https%3A%2F%2Fhooks.stripe.com%2Fadapter%2Falipay%2Fredirect%2Fcomplete%2Fsrc_1HDEFWKlwPmebFhp6tcpln8T%2Fsrc_client_secret_S6H9mVMKK6qxk9YxsUvbH55K&amp;secondary_merchant_id=acct_1EqOyCKlwPmebFhp&amp;secondary_merchant_industry=5734&amp;secondary_merchant_name=Yuki-Test&amp;sendFormat=normal&amp;service=create_forex_trade_wap&amp;sign=b691876a7f0bd889530f54a271d314d5&amp;sign_type=MD5&amp;subject=Yuki-Test&amp;supplier=Yuki-Test&amp;timeout_rule=20m&amp;total_fee=1.00"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecve7CRMbs6FrXfm8AxXMIh/src_client_secret_F79yszOBAiuaZTuIhbn3LPUW"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"https://hooks.stripe.com/redirect/authenticate/src_1HDEFWKlwPmebFhp6tcpln8T?client_secret=src_client_secret_S6H9mVMKK6qxk9YxsUvbH55K"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$Uri.parse("https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecaz6CRMbs6FrXfuYKBRSUG/src_client_secret_F6octeOshkgxT47dr0ZxSZiv")</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$hostedVoucherUrl = "https://payments.stripe.com/oxxo/voucher/test_YWNjdF8xSWN1c1VMMzJLbFJvdDAxLF9KRlBtckVBMERWM0lBZEUyb"</ID>
    <ID>MaxLineLength:PaymentIntentTest.kt$PaymentIntentTest$"The provided PaymentMethod has failed authentication. You can provide payment_method_data or a new PaymentMethod to attempt to fulfill this PaymentIntent again."</ID>
    <ID>MaxLineLength:PaymentIntentTest.kt$PaymentIntentTest$Uri.parse("https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecaz6CRMbs6FrXfuYKBRSUG/src_client_secret_F6octeOshkgxT47dr0ZxSZiv")</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod$@Deprecated("Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.")</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.BillingDetails$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.Card$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.Card.Checks$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.Card.ThreeDSecureUsage$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.SepaDebit$*</ID>
    <ID>MaxLineLength:PaymentMethodCreateParams.kt$PaymentMethodCreateParams.BacsDebit$*</ID>
    <ID>MaxLineLength:PaymentMethodEndToEndTest.kt$PaymentMethodEndToEndTest$fun</ID>
    <ID>MaxLineLength:PaymentMethodsActivityStarter.kt$PaymentMethodsActivityStarter.Args.Builder$*</ID>
    <ID>MaxLineLength:PaymentMethodsActivityTest.kt$PaymentMethodsActivityTest$private val listenerArgumentCaptor: KArgumentCaptor&lt;CustomerSession.PaymentMethodsRetrievalListener> = argumentCaptor()</ID>
    <ID>MaxLineLength:PaymentMethodsViewModelTest.kt$PaymentMethodsViewModelTest$private val listenerArgumentCaptor: KArgumentCaptor&lt;CustomerSession.PaymentMethodsRetrievalListener> = argumentCaptor()</ID>
    <ID>MaxLineLength:PaymentRelayContract.kt$PaymentRelayContract$internal</ID>
    <ID>MaxLineLength:PaymentSessionConfig.kt$PaymentSessionConfig.Builder$*</ID>
    <ID>MaxLineLength:PaymentSessionConfigTest.kt$PaymentSessionConfigTest$fun</ID>
    <ID>MaxLineLength:PaymentSessionTest.kt$PaymentSessionTest$private val paymentMethodsActivityStarterArgsCaptor: KArgumentCaptor&lt;PaymentMethodsActivityStarter.Args> = argumentCaptor()</ID>
    <ID>MaxLineLength:PaymentSessionViewModelTest.kt$PaymentSessionViewModelTest$fun</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.GooglePayConfiguration$*</ID>
    <ID>MaxLineLength:PaymentSheetAddCardFragmentTest.kt$PaymentSheetAddCardFragmentTest$fun</ID>
    <ID>MaxLineLength:PaymentSheetViewModel.kt$PaymentSheetViewModel$internal</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams$*</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams.Document$*</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams.Relationship$*</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams.Verification$*</ID>
    <ID>MaxLineLength:QueryStringFactoryTest.kt$QueryStringFactoryTest$"colors[]=blue&amp;colors[]=green&amp;empty_list=&amp;person[age]=45&amp;person[city]=San Francisco&amp;person[wishes]=&amp;person[friends][]=Alice&amp;person[friends][]=Bob"</ID>
    <ID>MaxLineLength:RemoteCardAccountRangeSourceTest.kt$RemoteCardAccountRangeSourceTest$fun</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$ </ID>
    <ID>MaxLineLength:SetupIntentTest.kt$SetupIntentTest$"The provided PaymentMethod has failed authentication. You can provide payment_method_data or a new PaymentMethod to attempt to fulfill this PaymentIntent again."</ID>
    <ID>MaxLineLength:SetupIntentTest.kt$SetupIntentTest$Uri.parse("https://hooks.stripe.com/redirect/authenticate/src_1EqTStGMT9dGPIDGJGPkqE6B" + "?client_secret=src_client_secret_FL9m741mmxtHykDlRTC5aQ02")</ID>
    <ID>MaxLineLength:Source.kt$Source$*</ID>
    <ID>MaxLineLength:Source.kt$Source$@Deprecated("Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.")</ID>
    <ID>MaxLineLength:SourceFixtures.kt$SourceFixtures$ </ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payLaterAssetUrlsDescriptive = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payLaterAssetUrlsStandard = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payOverTimeAssetUrlsDescriptive = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payOverTimeAssetUrlsStandard = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceParams.kt$SourceParams.Companion$*</ID>
    <ID>MaxLineLength:SourceSepaDebitDataJsonParserTest.kt$SourceSepaDebitDataJsonParserTest.Companion$ </ID>
    <ID>MaxLineLength:SourceSepaDebitDataJsonParserTest.kt$SourceSepaDebitDataJsonParserTest.Companion$"https://hooks.stripe.com/adapter/sepa_debit/file/src_1A0burBbvEcIpqUbyTfDmJPk/src_client_secret_5Dgw1AQGTABOh0vlnKyxgboh"</ID>
    <ID>MaxLineLength:Stripe.kt$Stripe$*</ID>
    <ID>MaxLineLength:Stripe.kt$Stripe.Companion$*</ID>
    <ID>MaxLineLength:Stripe3ds2AuthParamsTest.kt$Stripe3ds2AuthParamsTest.Companion$private const val DEVICE_DATA = "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.nid2Q-Ii21cSPHBaszR5KSXz866yX9I7AthLKpfWZoc7RIfz11UJ1EHuvIRDIyqqJ8txNUKKoL4keqMTqK5Yc5TqsxMn0nML8pZaPn40nXsJm_HFv3zMeOtRR7UTewsDWIgf5J-A6bhowIOmvKPCJRxspn_Cmja-YpgFWTp08uoJvqgntgg1lHmI1kh1UV6DuseYFUfuQlICTqC3TspAzah2CALWZORF_QtSeHc_RuqK02wOQMs-7079jRuSdBXvI6dQnL5ESH25wHHosfjHMZ9vtdUFNJo9J35UI1sdWFDzzj8k7bt0BupZhyeU0PSM9EHP-yv01-MQ9eslPTVNbFJ9YOHtq8WamvlKDr1sKxz6Ac_gUM8NgEcPP9SafPVxDd4H1Fwb5-4NYu2AD4xoAgMWE-YtzvfIFXZcU46NDoi6Xum3cHJqTH0UaOhBoqJJft9XZXYW80fjts-v28TkA76-QPF7CTDM6KbupvBkSoRq218eJLEywySXgCwf-Q95fsBtnnyhKcvfRaByq5kT7PH3DYD1rCQLexJ76A79kurre9pDjTKAv85G9DNkOFuVUYnNB3QGFReCcF9wzkGnZXdfkgN2BkB6n94bbkEyjbRb5r37XH6oRagx2fWLVj7kC5baeIwUPVb5kV_x4Kle7C-FPY1Obz4U7s6SVRnLGXY.IP9OcQx5uZxBRluOpn1m6Q.w-Ko5Qg6r-KCmKnprXEbKA7wV-SdLNDAKqjtuku6hda_0crOPRCPU4nn26Yxj7EG.p01pl8CKukuXzjLeY3a_Ew"</ID>
    <ID>MaxLineLength:Stripe3ds2AuthResultFixtures.kt$Stripe3ds2AuthResultFixtures$ </ID>
    <ID>MaxLineLength:Stripe3ds2AuthResultFixtures.kt$Stripe3ds2AuthResultFixtures$fallbackRedirectUrl = "https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecve7CRMbs6FrXfm8AxXMIh/src_client_secret_F79yszOBAiuaZTuIhbn3LPUW"</ID>
    <ID>MaxLineLength:Stripe3ds2AuthResultJsonParserTest.kt$Stripe3ds2AuthResultJsonParserTest$"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6IjA4NDAwMTRiLWY1YTgtNDA5My04MzdkLTgxOTA3YmJmMmU2MiIsImFjc1RyYW5zSUQiOiIwZjdkMTU0MC1mYTM2LTQ2OWYtYmQ5ZC03ZjIxYzkzMmU2MjEiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDUiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIn0="</ID>
    <ID>MaxLineLength:Stripe3ds2AuthResultJsonParserTest.kt$Stripe3ds2AuthResultJsonParserTest$"https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecve7CRMbs6FrXfm8AxXMIh/src_client_secret_F79yszOBAiuaZTuIhbn3LPUW"</ID>
    <ID>MaxLineLength:Stripe3ds2AuthResultJsonParserTest.kt$Stripe3ds2AuthResultJsonParserTest.Companion$ </ID>
    <ID>MaxLineLength:Stripe3ds2Fixtures.kt$Stripe3ds2Fixtures$private const val DEVICE_DATA = "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.nid2Q-Ii21cSPHBaszR5KSXz866yX9I7AthLKpfWZoc7RIfz11UJ1EHuvIRDIyqqJ8txNUKKoL4keqMTqK5Yc5TqsxMn0nML8pZaPn40nXsJm_HFv3zMeOtRR7UTewsDWIgf5J-A6bhowIOmvKPCJRxspn_Cmja-YpgFWTp08uoJvqgntgg1lHmI1kh1UV6DuseYFUfuQlICTqC3TspAzah2CALWZORF_QtSeHc_RuqK02wOQMs-7079jRuSdBXvI6dQnL5ESH25wHHosfjHMZ9vtdUFNJo9J35UI1sdWFDzzj8k7bt0BupZhyeU0PSM9EHP-yv01-MQ9eslPTVNbFJ9YOHtq8WamvlKDr1sKxz6Ac_gUM8NgEcPP9SafPVxDd4H1Fwb5-4NYu2AD4xoAgMWE-YtzvfIFXZcU46NDoi6Xum3cHJqTH0UaOhBoqJJft9XZXYW80fjts-v28TkA76-QPF7CTDM6KbupvBkSoRq218eJLEywySXgCwf-Q95fsBtnnyhKcvfRaByq5kT7PH3DYD1rCQLexJ76A79kurre9pDjTKAv85G9DNkOFuVUYnNB3QGFReCcF9wzkGnZXdfkgN2BkB6n94bbkEyjbRb5r37XH6oRagx2fWLVj7kC5baeIwUPVb5kV_x4Kle7C-FPY1Obz4U7s6SVRnLGXY.IP9OcQx5uZxBRluOpn1m6Q.w-Ko5Qg6r-KCmKnprXEbKA7wV-SdLNDAKqjtuku6hda_0crOPRCPU4nn26Yxj7EG.p01pl8CKukuXzjLeY3a_Ew"</ID>
    <ID>MaxLineLength:Stripe3ds2Fixtures.kt$Stripe3ds2Fixtures$private const val SDK_EPHEMERAL_PUBLIC_KEY = "{\"kty\":\"EC\",\"use\":\"sig\",\"crv\":\"P-256\",\"kid\":\"b23da28b-d611-46a8-93af-44ad57ce9c9d\",\"x\":\"hSwyaaAp3ppSGkpt7d9G8wnp3aIXelsZVo05EPpqetg\",\"y\":\"OUVOv9xPh5RYWapla0oz3vCJWRRXlDmppy5BGNeSl-A\"}"</ID>
    <ID>MaxLineLength:StripeApiRepositoryTest.kt$StripeApiRepositoryTest$"This PaymentIntent could be not be fulfilled via this session because a different payment method was attached to it. Another session could be attempting to fulfill this PaymentIntent. Please complete that session or try again."</ID>
    <ID>MaxLineLength:StripeApiRepositoryTest.kt$StripeApiRepositoryTest$"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.nid2Q-Ii21cSPHBaszR5KSXz866yX9I7AthLKpfWZoc7RIfz11UJ1EHuvIRDIyqqJ8txNUKKoL4keqMTqK5Yc5TqsxMn0nML8pZaPn40nXsJm_HFv3zMeOtRR7UTewsDWIgf5J-A6bhowIOmvKPCJRxspn_Cmja-YpgFWTp08uoJvqgntgg1lHmI1kh1UV6DuseYFUfuQlICTqC3TspAzah2CALWZORF_QtSeHc_RuqK02wOQMs-7079jRuSdBXvI6dQnL5ESH25wHHosfjHMZ9vtdUFNJo9J35UI1sdWFDzzj8k7bt0BupZhyeU0PSM9EHP-yv01-MQ9eslPTVNbFJ9YOHtq8WamvlKDr1sKxz6Ac_gUM8NgEcPP9SafPVxDd4H1Fwb5-4NYu2AD4xoAgMWE-YtzvfIFXZcU46NDoi6Xum3cHJqTH0UaOhBoqJJft9XZXYW80fjts-v28TkA76-QPF7CTDM6KbupvBkSoRq218eJLEywySXgCwf-Q95fsBtnnyhKcvfRaByq5kT7PH3DYD1rCQLexJ76A79kurre9pDjTKAv85G9DNkOFuVUYnNB3QGFReCcF9wzkGnZXdfkgN2BkB6n94bbkEyjbRb5r37XH6oRagx2fWLVj7kC5baeIwUPVb5kV_x4Kle7C-FPY1Obz4U7s6SVRnLGXY.IP9OcQx5uZxBRluOpn1m6Q.w-Ko5Qg6r-KCmKnprXEbKA7wV-SdLNDAKqjtuku6hda_0crOPRCPU4nn26Yxj7EG.p01pl8CKukuXzjLeY3a_Ew"</ID>
    <ID>MaxLineLength:StripeColorUtils.kt$StripeColorUtils.Companion$*</ID>
    <ID>MaxLineLength:StripeEditTextTest.kt$StripeEditTextTest$editText.defaultColorStateList = ColorStateList.valueOf(ContextCompat.getColor(context, android.R.color.primary_text_dark))</ID>
    <ID>MaxLineLength:StripeEndToEndTest.kt$StripeEndToEndTest$fun</ID>
    <ID>MaxLineLength:StripeErrorJsonParserTest.kt$StripeErrorJsonParserTest$message = "The Stripe API is only accessible over HTTPS. Please see &lt;https://stripe.com/docs> for more information."</ID>
    <ID>MaxLineLength:StripeErrorJsonParserTest.kt$StripeErrorJsonParserTest.Companion$ </ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.API_NOT_CONNECTED</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.CANCELED</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.INTERRUPTED</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.INVALID_ACCOUNT</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.SERVICE_DISABLED</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.SERVICE_VERSION_UPDATE_REQUIRED</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$CommonStatusCodes.SUCCESS</ID>
    <ID>MaxLineLength:StripeGooglePayContract.kt$Status.RESULT_INTERNAL_ERROR, Status.RESULT_CANCELED, Status.RESULT_DEAD_CLIENT -> R.string.stripe_google_pay_error_internal</ID>
    <ID>MaxLineLength:StripeIntent.kt$StripeIntent.Status$*</ID>
    <ID>MaxLineLength:StripeKtx.kt$*</ID>
    <ID>MaxLineLength:StripeKtxTest.kt$StripeKtxTest$`Given repository returns non-empty value when calling retrieveAPI with String param then returns correct result`</ID>
    <ID>MaxLineLength:StripeKtxTest.kt$StripeKtxTest$assertFailsWith</ID>
    <ID>MaxLineLength:StripeKtxTest.kt$StripeKtxTest$private inline</ID>
    <ID>MaxLineLength:StripePaymentControllerTest.kt$StripePaymentControllerTest$.</ID>
    <ID>NestedBlockDepth:StripeJsonUtils.kt$StripeJsonUtils$ internal fun mapToJsonObject(mapObject: Map&lt;String, *>?): JSONObject?</ID>
    <ID>ReturnCount:CardUtils.kt$CardUtils$ internal fun isValidLuhnNumber(cardNumber: String?): Boolean</ID>
    <ID>ReturnCount:DateUtils.kt$DateUtils$@VisibleForTesting @JvmStatic fun isExpiryDataValid(expiryMonth: Int, expiryYear: Int, calendar: Calendar): Boolean</ID>
    <ID>ReturnCount:FingerprintDataJsonParser.kt$FingerprintDataJsonParser$override fun parse(json: JSONObject): FingerprintData?</ID>
    <ID>ReturnCount:PaymentAuthWebViewClient.kt$PaymentAuthWebViewClient$private fun isReturnUrl(uri: Uri): Boolean</ID>
    <ID>ReturnCount:PaymentSession.kt$PaymentSession$ fun handlePaymentData( requestCode: Int, resultCode: Int, data: Intent? ): Boolean</ID>
    <ID>ReturnCount:ShippingInfoWidget.kt$ShippingInfoWidget$ fun validateAllFields(): Boolean</ID>
    <ID>ReturnCount:StripeIntentResult.kt$StripeIntentResult$@StripeIntentResult.Outcome private fun determineOutcome( stripeIntentStatus: StripeIntent.Status?, @StripeIntentResult.Outcome outcome: Int ): Int</ID>
    <ID>ReturnCount:WalletJsonParser.kt$WalletJsonParser$override fun parse(json: JSONObject): Wallet?</ID>
    <ID>SerialVersionUIDInSerializableClass:StripeError.kt$StripeError : StripeModelSerializable</ID>
    <ID>SwallowedException:PaymentUtils.kt$PaymentUtils$catch (e: ClassCastException) { currencyFormat.format(majorUnitAmount) }</ID>
    <ID>SwallowedException:Stripe.kt$Stripe$catch (exception: CardException) { // Should never occur. CardException is only for card related requests. null }</ID>
    <ID>SwallowedException:StripeJsonUtils.kt$StripeJsonUtils$catch (classCastException: ClassCastException) { // don't include the item in the JSONObject if the keys are not Strings }</ID>
    <ID>SwallowedException:StripeJsonUtils.kt$StripeJsonUtils$catch (jsonException: JSONException) { // Simply skip this value }</ID>
    <ID>ThrowsCount:StripeApiRepository.kt$StripeApiRepository$@Throws( InvalidRequestException::class, AuthenticationException::class, CardException::class, APIException::class ) private fun handleApiError(response: StripeResponse)</ID>
    <ID>TooGenericExceptionThrown:DefaultAlipayRepository.kt$DefaultAlipayRepository$throw RuntimeException("Unable to authenticate Payment Intent with Alipay SDK")</ID>
    <ID>TooManyFunctions:CardInputWidget.kt$CardInputWidget : LinearLayoutCardWidget</ID>
    <ID>TooManyFunctions:CardMultilineWidget.kt$CardMultilineWidget : LinearLayoutCardWidget</ID>
    <ID>TooManyFunctions:Stripe.kt$Stripe</ID>
    <ID>TooManyFunctions:StripeApiRepository.kt$StripeApiRepository : StripeRepository</ID>
    <ID>TooManyFunctions:StripeKtx.kt$com.stripe.android.StripeKtx.kt</ID>
    <ID>TooManyFunctions:StripePaymentController.kt$StripePaymentController : PaymentController</ID>
    <ID>TooManyFunctions:StripeRepository.kt$StripeRepository</ID>
    <ID>UnnecessaryAbstractClass:ActivityStarter.kt$ActivityStarter&lt;TargetActivityType : Activity, ArgsType : ActivityStarter.Args></ID>
    <ID>UnusedPrivateMember:CardMultilineWidget.kt$CardMultilineWidget$private val cvcHelperText: Int @StringRes get() { return if (CardBrand.AmericanExpress == cardBrand) { R.string.cvc_multiline_helper_amex } else { R.string.cvc_multiline_helper } }</ID>
    <ID>UnusedPrivateMember:CustomerSession.kt$CustomerSession$private fun &lt;L : RetrievalListener?> getListener(operationId: String): L?</ID>
    <ID>UnusedPrivateMember:DefaultFlowControllerInitializerTest.kt$DefaultFlowControllerInitializerTest$private fun testDefaultSavedSelection()</ID>
    <ID>UnusedPrivateMember:PayWithGoogleUtils.kt$PayWithGoogleUtils$i</ID>
    <ID>UnusedPrivateMember:PaymentFlowActivityStarter.kt$PaymentFlowActivityStarter$config: PaymentSessionConfig</ID>
    <ID>UnusedPrivateMember:PaymentIntent.kt$PaymentIntent$private val setupFutureUsage: StripeIntent.Usage? = null</ID>
    <ID>UnusedPrivateMember:PaymentMethod.kt$PaymentMethod.CardPresent$private val ignore: Boolean = true</ID>
    <ID>UnusedPrivateMember:PersonTokenParams.kt$PersonTokenParams.Companion$// top level param private const val PARAM_PERSON = "person"</ID>
    <ID>UnusedPrivateMember:SourceParamsTest.kt$SourceParamsTest.Companion$private val METADATA = mapOf( "color" to "blue", "animal" to "dog" )</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult$private val liveMode: Boolean = false</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val acsChallengeMandated: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val acsUrl: String? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val authenticationType: String? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val cardholderInfo: String? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val messageExtension: List&lt;MessageExtension>? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val messageType: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val messageVersion: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val sdkTransId: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.MessageExtension$private val criticalityIndicator: Boolean</ID>
    <ID>UnusedPrivateMember:Stripe3ds2Fixtures.kt$Stripe3ds2Fixtures$private val SDK_TRANSACTION_ID = UUID.randomUUID().toString()</ID>
    <ID>UnusedPrivateMember:StripeBrowserLauncherActivity.kt$StripeBrowserLauncherActivity$activityResult: ActivityResult</ID>
    <ID>UnusedPrivateMember:StripeFileParams.kt$StripeFileParams$/** * Optional parameters to automatically create a * [file link](https://stripe.com/docs/api/files/create#file_links) for the newly created file. * * [file_link_data]](https://stripe.com/docs/api/files/create#create_file-file_link_data) */ private val fileLink: FileLink? = null</ID>
    <ID>UnusedPrivateMember:StripeFileParams.kt$StripeFileParams.FileLink$/** * A future timestamp after which the link will no longer be usable. * * [file_link_data.expires_at](https://stripe.com/docs/api/files/create#create_file-file_link_data-expires_at) */ private val expiresAt: Long? = null</ID>
    <ID>UnusedPrivateMember:StripeFileParams.kt$StripeFileParams.FileLink$/** * Set of key-value pairs that you can attach to an object. This can be useful for storing * additional information about the object in a structured format. Individual keys can be * unset by posting an empty value to them. All keys can be unset by posting an empty value * to metadata. * * [file_link_data.metadata](https://stripe.com/docs/api/files/create#create_file-file_link_data-metadata) */ private val metadata: Map&lt;String, String>? = null</ID>
    <ID>UnusedPrivateMember:StripeFileParams.kt$StripeFileParams.FileLink$/** * Set this to `true` to create a file link for the newly created file. Creating a link is * only possible when the file’s `purpose` is one of the following: `business_icon`, * `business_logo`, `customer_signature`, `dispute_evidence`, `pci_document`, or * `tax_document_user_upload`. * * [file_link_data.create](https://stripe.com/docs/api/files/create#create_file-file_link_data-create) */ private val create: Boolean = false</ID>
    <ID>VarCouldBeVal:BasePaymentMethodsListFragment.kt$BasePaymentMethodsListFragment.&lt;no name provided>$var canScroll = true</ID>
  </CurrentIssues>
</SmellBaseline>
